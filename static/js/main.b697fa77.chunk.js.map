{"version":3,"sources":["GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["GameBoard","_ref","board","react_default","a","createElement","className","map","col","GameColumn","key","toString","index","cells","_ref2","dispatch","useContext","GameDispatch","onClick","type","payload","cell","GameCell","winner","ownedState","reverse","_ref3","color","style","React","createContext","gameReducer","state","action","createBoard","turn","gameOver","thisTurn","incoming","thisCount","cols","count","numRows","owner","lastCol","lastRow","searchDirs","start","forEach","dir","i","thisPath","numCols","push","thisOwner","result","pos","path","filter","length","evaluateBoard","Error","boardSize","Array","from","_","id","App","_useReducer","useReducer","_useReducer2","Object","slicedToArray","gameState","gameDispatch","labelText","Provider","value","GameBoard_GameBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b697fa77.chunk.js","sourcesContent":["import React, {useContext} from 'react';\nimport './GameBoard.css';\nimport {GameDispatch} from './App';\n\n\nexport default function GameBoard({board}) {\n\n    return (\n        <div className='GameBoard'>\n            <div className='GameField'>\n                {board['cols'].map((col) => {\n                    return <GameColumn key={col['id'].toString()} index={col['id']} cells={col['cells']} />\n                })}\n            </div>\n            <div className='Mask' />\n        </div>\n    );\n}\n\nfunction GameColumn({index, cells}) {\n\n    const dispatch = useContext(GameDispatch);\n\n    return (\n        <div className='GameColumn' onClick={() => dispatch({type: 'placeTile', payload: index})}>{\n            cells.map((cell) => {\n                const key = cell['id'].toString() + ',' + cell['owner'].toString() + ',' + cell['winner'].toString();\n                return <GameCell key={key} winner={cell['winner']} ownedState={cell['owner']} />\n            }).reverse()\n        }\n        </div>\n    );\n}\n\nfunction GameCell({ownedState, winner}) {\n\n    let className = 'GameCell';\n    if( winner ) {\n        className += 'Winner';\n    }\n\n    let color = 'white';\n    if (ownedState > 0) {\n        ownedState === 1 ? color = 'red' : color = 'yellow';\n    }\n\n    return (\n        <div className={className} style={{color: color}} />\n    );\n\n}","import React, { useReducer } from 'react';\nimport './App.css';\nimport GameBoard from './GameBoard';\n\nexport const GameDispatch = React.createContext(null);\n\nfunction App() {\n\n  const [gameState, gameDispatch] = useReducer(gameReducer, { turn: 1, gameOver: false, board: createBoard() });\n\n  let labelText = gameState.turn === 1 ? `Red's Turn` : `Yellow's Turn`;\n\n  if (gameState.gameOver) {\n    labelText = gameState.turn === 0 ? 'Draw!' : gameState.turn === 1 ? 'Red Wins!' : 'Yellow Wins!';\n  }\n\n  return (\n    <div className=\"App\">\n      <GameDispatch.Provider value={gameDispatch}>\n        <label>{labelText}</label>\n        <GameBoard board={gameState.board} />\n        <button type=\"reset\" onClick={() => gameDispatch({ type: 'newGame' })}>New Game</button>\n      </GameDispatch.Provider>\n    </div>\n  );\n}\n\nfunction gameReducer(state, action) {\n\n  if (action.type === 'newGame') {\n    return { board: createBoard(), turn: 1, gameOver: false };\n  }\n\n  if (action.type === 'placeTile') {\n    const thisTurn = state.turn;\n    let board = state.board;\n\n    const incoming = action.payload;\n    const thisCount = board.cols[incoming].count;\n    const valid = !state.gameOver && thisCount < board.numRows;\n\n    if (!valid) {\n      return state;\n    }\n\n    board.cols[incoming].cells[thisCount].owner = thisTurn;\n    board.cols[incoming].count = thisCount + 1;\n\n    const winner = evaluateBoard(board, incoming);\n\n    if (winner) {\n      return { board: board, turn: thisTurn, gameOver: true };\n    }\n\n    const allFull = board.cols.filter((col) => col.count >= board.numRows).length === board.numCols;\n    if (allFull) {\n      return { board: board, turn: 0, gameOver: true };\n    }\n\n    return { board: board, turn: (thisTurn % 2) + 1 };\n  }\n\n  throw new Error(\"Something went horribly wrong.\");\n}\n\nfunction evaluateBoard(board, lastCol) {\n\n  const lastRow = board.cols[lastCol].count - 1;\n  const searchDirs = [[1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1], [0, -1], [1, -1]];\n  const depth = 4;\n  const start = [[lastCol, lastRow]];\n\n  // this finds all points around the last drop to check for wins, saves checking the board every time\n  searchDirs.forEach((dir) => {\n    for (var i = 0; i < depth; ++i) {\n      const thisPath = [(dir[0] * i) + start[0][0], (dir[1] * i) + start[0][1]];\n      if ((thisPath[0] >= 0 && thisPath[0] < board.numCols) && (thisPath[1] >= 0 && thisPath[1] < board.numRows)) {\n        start.push(thisPath);\n      }\n    }\n  });\n\n  const thisOwner = board.cols[lastCol].cells[lastRow].owner;\n  let result = false;\n\n  // this iterates through all the points to find all wins\n  start.forEach((pos) => {\n    searchDirs.forEach((dir) => {\n      let tail = 3;\n      let path = [board['cols'][pos[0]]['cells'][pos[1]]];\n      for (var i = 1; i <= tail; ++i) {\n        const thisPath = [(dir[0] * i) + pos[0], (dir[1] * i) + pos[1]];\n        if ((thisPath[0] >= 0 && thisPath[0] < board.numCols) && (thisPath[1] >= 0 && thisPath[1] < board.numRows)) {\n          path.push(board['cols'][thisPath[0]]['cells'][thisPath[1]]);\n        }\n      }\n\n      if (path.filter(cell => cell.owner === thisOwner).length >= 4) {\n        path.map(cell => cell.winner = true);\n        result = true;\n      }\n    });\n  });\n\n  return result;\n}\n\nfunction createBoard() {\n  const boardSize = { numRows: 6, numCols: 7 };\n\n  return {\n    numRows: boardSize.numRows,\n    numCols: boardSize.numCols,\n    cols: Array.from({ length: boardSize.numCols }, (_, i) => {\n      return {\n        id: i,\n        count: 0,\n        cells:\n          Array.from({ length: boardSize.numRows }, (_, i) => { return { id: i, winner: false, owner: 0 } })\n      };\n    })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}